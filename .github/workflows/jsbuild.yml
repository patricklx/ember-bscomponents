name: Test, Build & Publish

on:
  create:
    tags: '**'
  push:
    branches: '**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
    - name: install pnpm
      run: npm i -g pnpm
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    - uses: actions/cache@v3
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    - name: Install dependencies (npm)
      run: |
        npm i -g pnpm
        pnpm i
    - name: build and test
      run: |
        ./node_modules/.bin/ember test
      env:
        CI: true

  ember-try:
    name: ember-try (${{ matrix.scenario }})
    needs: test
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    env:
      CI: 'true'
    strategy:
      fail-fast: false
      matrix:
        experimental: [false]
        scenario:
          - release
        include:
          - scenario: beta
            experimental: true
          - scenario: canary
            experimental: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: install pnpm
        run: npm i -g pnpm
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies (npm)
        run: |
          pnpm i
      - name: Run ember-try scenario
        run: ./node_modules/.bin/ember try:one ember-${{ matrix.scenario }} --skip-cleanup=true --- cat package.json
      - name: Build
        run: ./node_modules/.bin/ember build --environment test
      - name: Run test
        run: ./node_modules/.bin/ember test

  deploy:
    needs: [test, ember-try]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: install pnpm
        run: npm i -g pnpm
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies (npm)
        run: |
          pnpm i
      - name: npm install, build, and deploy docs
        if: github.ref == 'refs/heads/run-never'
        run: |
          mkdir ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          pnpm run ts:build
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag exists";
          else
            ADDON_DOCS_UPDATE_LATEST=false ADDON_DOCS_VERSION_PATH=$TAG ./node_modules/.bin/ember deploy production
            ADDON_DOCS_UPDATE_LATEST=true ADDON_DOCS_VERSION_PATH=$TAG ./node_modules/.bin/ember deploy production
          fi
          ADDON_DOCS_UPDATE_LATEST=false ADDON_DOCS_VERSION_PATH=main ./node_modules/.bin/ember deploy production
        env:
          CI: true
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      - name: deploy npm
        if: github.ref == 'refs/heads/main'
        run: |
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag exists";
          else
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            pnpm install
            pnpm publish || echo "already published"
          fi
        env:
          NPM_TOKEN: "${{ secrets.NPM_TOKEN }}"
      - name: create tag
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_COMMIT: ${{ github.sha }}
        run: |
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag exists";
          else
            curl -X POST -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/patricklx/ember-bscomponents/git/refs -d "{ \"ref\": \"refs/tags/$TAG\", \"sha\": \"$GITHUB_COMMIT\" }"
          fi
      - name: Create a Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          url="https://api.github.com/repos/patricklx/ember-bscomponents/releases"
          exists=$(curl -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" $url | jq ".[] | select(.tag_name == \"$TAG\") | .id")
          if [[ -z $exists ]]; then
            curl -X POST -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" $url -d "{ \"tag_name\": \"$TAG\", \"name\": \"$TAG\", \"body\": \"\", \"draft\": false, \"prerelease\": false}"
          else
            echo "release already exists";
          fi;
